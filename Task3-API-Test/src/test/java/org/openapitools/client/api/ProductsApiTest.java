/*
 * Best Buy API Playground
 * A sample dataset and API for you to experiment with.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: developer@bestbuy.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.model.ErrorModel;
import org.openapitools.client.model.Product;
import org.openapitools.client.ApiClient;
import org.openapitools.client.api.ProductsApi;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.filter.log.ErrorLoggingFilter;
import org.junit.Before;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import static io.restassured.config.ObjectMapperConfig.objectMapperConfig;
import static io.restassured.config.RestAssuredConfig.config;
import static org.openapitools.client.GsonObjectMapper.gson;

/**
 * API tests for ProductsApi
 */
@Ignore
public class ProductsApiTest {

    private ProductsApi api;

    @Before
    public void createApi() {
        api = ApiClient.api(ApiClient.Config.apiConfig().reqSpecSupplier(
                () -> new RequestSpecBuilder().setConfig(config().objectMapperConfig(objectMapperConfig().defaultObjectMapper(gson())))
                        .addFilter(new ErrorLoggingFilter())
                        .setBaseUri("http://localhost:3030"))).products();
    }

    /**
     * Empty response
     */
    @Test
    public void shouldSee200AfterAddProduct() {
        Product product = null;
        api.addProduct()
                .body(product).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Unexpected error
     */
    @Test
    public void shouldSee400AfterAddProduct() {
        Product product = null;
        api.addProduct()
                .body(product).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Product deleted
     */
    @Test
    public void shouldSee200AfterDeleteProduct() {
        Long id = null;
        api.deleteProduct()
                .idPath(id).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Unexpected error
     */
    @Test
    public void shouldSee400AfterDeleteProduct() {
        Long id = null;
        api.deleteProduct()
                .idPath(id).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Product response
     */
    @Test
    public void shouldSee200AfterFindProductById() {
        Long id = null;
        api.findProductById()
                .idPath(id).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Error
     */
    @Test
    public void shouldSee400AfterFindProductById() {
        Long id = null;
        api.findProductById()
                .idPath(id).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Product response
     */
    @Test
    public void shouldSee200AfterFindProducts() {
        Integer $limit = null;
        Integer $skip = null;
        api.findProducts().execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Error
     */
    @Test
    public void shouldSee400AfterFindProducts() {
        Integer $limit = null;
        Integer $skip = null;
        api.findProducts().execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Product response
     */
    @Test
    public void shouldSee200AfterUpdateProductById() {
        Long id = null;
        Product product = null;
        api.updateProductById()
                .idPath(id)
                .body(product).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Error
     */
    @Test
    public void shouldSee400AfterUpdateProductById() {
        Long id = null;
        Product product = null;
        api.updateProductById()
                .idPath(id)
                .body(product).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

}