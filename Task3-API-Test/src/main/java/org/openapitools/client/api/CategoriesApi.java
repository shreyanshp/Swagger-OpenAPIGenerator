/*
 * Best Buy API Playground
 * A sample dataset and API for you to experiment with.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: developer@bestbuy.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import com.google.gson.reflect.TypeToken;
import org.openapitools.client.model.Category;
import org.openapitools.client.model.ErrorModel;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import io.restassured.RestAssured;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.builder.ResponseSpecBuilder;
import io.restassured.http.Method;
import io.restassured.response.Response;
import io.swagger.annotations.*;

import java.lang.reflect.Type;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;
import org.openapitools.client.JSON;

import static io.restassured.http.Method.*;

@Api(value = "Categories")
public class CategoriesApi {

    private RequestSpecBuilder reqSpec;

    private CategoriesApi(RequestSpecBuilder reqSpec) {
        this.reqSpec = reqSpec;
    }

    public static CategoriesApi categories(RequestSpecBuilder reqSpec) {
        return new CategoriesApi(reqSpec);
    }


    @ApiOperation(value = "",
            notes = "Creates a new category",
            nickname = "addCategory",
            tags = { "categories" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "Empty response") ,
            @ApiResponse(code = 400, message = "Unexpected error")  })
    public AddCategoryOper addCategory() {
        return new AddCategoryOper(reqSpec);
    }

    @ApiOperation(value = "",
            notes = "Deletes a single category based on the ID supplied",
            nickname = "deletecategory",
            tags = { "categories" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "Category deleted") ,
            @ApiResponse(code = 400, message = "Unexpected error")  })
    public DeletecategoryOper deletecategory() {
        return new DeletecategoryOper(reqSpec);
    }

    @ApiOperation(value = "",
            notes = "Returns all categories that match the given filter criteria. If no filters are included, defaults to returning a paginated list of all categories.",
            nickname = "findCategories",
            tags = { "categories" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "Category response") ,
            @ApiResponse(code = 400, message = "Error")  })
    public FindCategoriesOper findCategories() {
        return new FindCategoriesOper(reqSpec);
    }

    @ApiOperation(value = "",
            notes = "Returns a categories based on category ID",
            nickname = "findCategoryById",
            tags = { "categories" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "Category response") ,
            @ApiResponse(code = 400, message = "Error")  })
    public FindCategoryByIdOper findCategoryById() {
        return new FindCategoryByIdOper(reqSpec);
    }

    @ApiOperation(value = "",
            notes = "Updates a categories based on category ID",
            nickname = "updateCategoryById",
            tags = { "categories" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "Category response") ,
            @ApiResponse(code = 400, message = "Error")  })
    public UpdateCategoryByIdOper updateCategoryById() {
        return new UpdateCategoryByIdOper(reqSpec);
    }

    /**
     * Customise request specification
     * @param consumer consumer
     * @return api
     */
    public CategoriesApi reqSpec(Consumer<RequestSpecBuilder> consumer) {
        consumer.accept(reqSpec);
        return this;
    }

    /**
     * 
     * Creates a new category
     *
     * @see #body Category to add (required)
     */
    public static class AddCategoryOper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/categories";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public AddCategoryOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /categories
         * @param handler handler
         * @param <T> type
         * @return type
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

         /**
         * @param category (Category) Category to add (required)
         * @return operation
         */
        public AddCategoryOper body(Category category) {
            reqSpec.setBody(category);
            return this;
        }

        /**
         * Customise request specification
         * @param consumer consumer
         * @return operation
         */
        public AddCategoryOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         * @param consumer consumer
         * @return operation
         */
        public AddCategoryOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * Deletes a single category based on the ID supplied
     *
     * @see #idPath ID of category to delete (required)
     */
    public static class DeletecategoryOper {

        public static final Method REQ_METHOD = DELETE;
        public static final String REQ_URI = "/categories/{id}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public DeletecategoryOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * DELETE /categories/{id}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        public static final String ID_PATH = "id";

        /**
         * @param id (Long) ID of category to delete (required)
         * @return operation
         */
        public DeletecategoryOper idPath(Object id) {
            reqSpec.addPathParam(ID_PATH, id);
            return this;
        }

        /**
         * Customise request specification
         * @param consumer consumer
         * @return operation
         */
        public DeletecategoryOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         * @param consumer consumer
         * @return operation
         */
        public DeletecategoryOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * Returns all categories that match the given filter criteria. If no filters are included, defaults to returning a paginated list of all categories.
     *
     * @see #$limitQuery Limit the number of categories returned. (optional)
     * @see #$skipQuery Skip the specified number of categories. (optional)
     * return List&lt;Category&gt;
     */
    public static class FindCategoriesOper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/categories";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public FindCategoriesOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /categories
         * @param handler handler
         * @param <T> type
         * @return type
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /categories
         * @param handler handler
         * @return List&lt;Category&gt;
         */
        public List<Category> executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<List<Category>>(){}.getType();
            return execute(handler).as(type);
        }

        public static final String $LIMIT_QUERY = "$limit";

        /**
         * @param $limit (Integer) Limit the number of categories returned. (optional)
         * @return operation
         */
        public FindCategoriesOper $limitQuery(Object... $limit) {
            reqSpec.addQueryParam($LIMIT_QUERY, $limit);
            return this;
        }

        public static final String $SKIP_QUERY = "$skip";

        /**
         * @param $skip (Integer) Skip the specified number of categories. (optional)
         * @return operation
         */
        public FindCategoriesOper $skipQuery(Object... $skip) {
            reqSpec.addQueryParam($SKIP_QUERY, $skip);
            return this;
        }

        /**
         * Customise request specification
         * @param consumer consumer
         * @return operation
         */
        public FindCategoriesOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         * @param consumer consumer
         * @return operation
         */
        public FindCategoriesOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * Returns a categories based on category ID
     *
     * @see #idPath ID of category to fetch (required)
     * return Category
     */
    public static class FindCategoryByIdOper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/categories/{id}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public FindCategoryByIdOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /categories/{id}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /categories/{id}
         * @param handler handler
         * @return Category
         */
        public Category executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<Category>(){}.getType();
            return execute(handler).as(type);
        }

        public static final String ID_PATH = "id";

        /**
         * @param id (Long) ID of category to fetch (required)
         * @return operation
         */
        public FindCategoryByIdOper idPath(Object id) {
            reqSpec.addPathParam(ID_PATH, id);
            return this;
        }

        /**
         * Customise request specification
         * @param consumer consumer
         * @return operation
         */
        public FindCategoryByIdOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         * @param consumer consumer
         * @return operation
         */
        public FindCategoryByIdOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * Updates a categories based on category ID
     *
     * @see #idPath ID of category to update (required)
     * @see #body Category attributes to update (required)
     * return Category
     */
    public static class UpdateCategoryByIdOper {

        public static final Method REQ_METHOD = PATCH;
        public static final String REQ_URI = "/categories/{id}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public UpdateCategoryByIdOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PATCH /categories/{id}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * PATCH /categories/{id}
         * @param handler handler
         * @return Category
         */
        public Category executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<Category>(){}.getType();
            return execute(handler).as(type);
        }

         /**
         * @param category (Category) Category attributes to update (required)
         * @return operation
         */
        public UpdateCategoryByIdOper body(Category category) {
            reqSpec.setBody(category);
            return this;
        }

        public static final String ID_PATH = "id";

        /**
         * @param id (Long) ID of category to update (required)
         * @return operation
         */
        public UpdateCategoryByIdOper idPath(Object id) {
            reqSpec.addPathParam(ID_PATH, id);
            return this;
        }

        /**
         * Customise request specification
         * @param consumer consumer
         * @return operation
         */
        public UpdateCategoryByIdOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         * @param consumer consumer
         * @return operation
         */
        public UpdateCategoryByIdOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
}
