/*
 * Best Buy API Playground
 * A sample dataset and API for you to experiment with.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: developer@bestbuy.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import com.google.gson.reflect.TypeToken;
import org.openapitools.client.model.ErrorModel;
import org.openapitools.client.model.Product;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import io.restassured.RestAssured;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.builder.ResponseSpecBuilder;
import io.restassured.http.Method;
import io.restassured.response.Response;
import io.swagger.annotations.*;

import java.lang.reflect.Type;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;
import org.openapitools.client.JSON;

import static io.restassured.http.Method.*;

@Api(value = "Products")
public class ProductsApi {

    private RequestSpecBuilder reqSpec;

    private ProductsApi(RequestSpecBuilder reqSpec) {
        this.reqSpec = reqSpec;
    }

    public static ProductsApi products(RequestSpecBuilder reqSpec) {
        return new ProductsApi(reqSpec);
    }


    @ApiOperation(value = "",
            notes = "Creates a new product",
            nickname = "addProduct",
            tags = { "products" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "Empty response") ,
            @ApiResponse(code = 400, message = "Unexpected error")  })
    public AddProductOper addProduct() {
        return new AddProductOper(reqSpec);
    }

    @ApiOperation(value = "",
            notes = "Deletes a single product based on the ID supplied",
            nickname = "deleteProduct",
            tags = { "products" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "Product deleted") ,
            @ApiResponse(code = 400, message = "Unexpected error")  })
    public DeleteProductOper deleteProduct() {
        return new DeleteProductOper(reqSpec);
    }

    @ApiOperation(value = "",
            notes = "Returns a product based on an ID,",
            nickname = "findProductById",
            tags = { "products" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "Product response") ,
            @ApiResponse(code = 400, message = "Error")  })
    public FindProductByIdOper findProductById() {
        return new FindProductByIdOper(reqSpec);
    }

    @ApiOperation(value = "",
            notes = "Returns all products that match the given filter criteria. If no filters are included, defaults to returning a paginated list of all products.",
            nickname = "findProducts",
            tags = { "products" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "Product response") ,
            @ApiResponse(code = 400, message = "Error")  })
    public FindProductsOper findProducts() {
        return new FindProductsOper(reqSpec);
    }

    @ApiOperation(value = "",
            notes = "Updates a product based on an ID,",
            nickname = "updateProductById",
            tags = { "products" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "Product response") ,
            @ApiResponse(code = 400, message = "Error")  })
    public UpdateProductByIdOper updateProductById() {
        return new UpdateProductByIdOper(reqSpec);
    }

    /**
     * Customise request specification
     * @param consumer consumer
     * @return api
     */
    public ProductsApi reqSpec(Consumer<RequestSpecBuilder> consumer) {
        consumer.accept(reqSpec);
        return this;
    }

    /**
     * 
     * Creates a new product
     *
     * @see #body Product to add (required)
     */
    public static class AddProductOper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/products";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public AddProductOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /products
         * @param handler handler
         * @param <T> type
         * @return type
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

         /**
         * @param product (Product) Product to add (required)
         * @return operation
         */
        public AddProductOper body(Product product) {
            reqSpec.setBody(product);
            return this;
        }

        /**
         * Customise request specification
         * @param consumer consumer
         * @return operation
         */
        public AddProductOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         * @param consumer consumer
         * @return operation
         */
        public AddProductOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * Deletes a single product based on the ID supplied
     *
     * @see #idPath ID of product to delete (required)
     */
    public static class DeleteProductOper {

        public static final Method REQ_METHOD = DELETE;
        public static final String REQ_URI = "/products/{id}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public DeleteProductOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * DELETE /products/{id}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        public static final String ID_PATH = "id";

        /**
         * @param id (Long) ID of product to delete (required)
         * @return operation
         */
        public DeleteProductOper idPath(Object id) {
            reqSpec.addPathParam(ID_PATH, id);
            return this;
        }

        /**
         * Customise request specification
         * @param consumer consumer
         * @return operation
         */
        public DeleteProductOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         * @param consumer consumer
         * @return operation
         */
        public DeleteProductOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * Returns a product based on an ID,
     *
     * @see #idPath ID of product to fetch (required)
     * return Product
     */
    public static class FindProductByIdOper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/products/{id}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public FindProductByIdOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /products/{id}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /products/{id}
         * @param handler handler
         * @return Product
         */
        public Product executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<Product>(){}.getType();
            return execute(handler).as(type);
        }

        public static final String ID_PATH = "id";

        /**
         * @param id (Long) ID of product to fetch (required)
         * @return operation
         */
        public FindProductByIdOper idPath(Object id) {
            reqSpec.addPathParam(ID_PATH, id);
            return this;
        }

        /**
         * Customise request specification
         * @param consumer consumer
         * @return operation
         */
        public FindProductByIdOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         * @param consumer consumer
         * @return operation
         */
        public FindProductByIdOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * Returns all products that match the given filter criteria. If no filters are included, defaults to returning a paginated list of all products.
     *
     * @see #$limitQuery Limit the number of products returned. (optional)
     * @see #$skipQuery Skip the specified number of products. (optional)
     * return List&lt;Product&gt;
     */
    public static class FindProductsOper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/products";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public FindProductsOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /products
         * @param handler handler
         * @param <T> type
         * @return type
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /products
         * @param handler handler
         * @return List&lt;Product&gt;
         */
        public List<Product> executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<List<Product>>(){}.getType();
            return execute(handler).as(type);
        }

        public static final String $LIMIT_QUERY = "$limit";

        /**
         * @param $limit (Integer) Limit the number of products returned. (optional)
         * @return operation
         */
        public FindProductsOper $limitQuery(Object... $limit) {
            reqSpec.addQueryParam($LIMIT_QUERY, $limit);
            return this;
        }

        public static final String $SKIP_QUERY = "$skip";

        /**
         * @param $skip (Integer) Skip the specified number of products. (optional)
         * @return operation
         */
        public FindProductsOper $skipQuery(Object... $skip) {
            reqSpec.addQueryParam($SKIP_QUERY, $skip);
            return this;
        }

        /**
         * Customise request specification
         * @param consumer consumer
         * @return operation
         */
        public FindProductsOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         * @param consumer consumer
         * @return operation
         */
        public FindProductsOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * Updates a product based on an ID,
     *
     * @see #idPath ID of product to fetch (required)
     * @see #body Product attributes to update (required)
     * return Product
     */
    public static class UpdateProductByIdOper {

        public static final Method REQ_METHOD = PATCH;
        public static final String REQ_URI = "/products/{id}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public UpdateProductByIdOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PATCH /products/{id}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * PATCH /products/{id}
         * @param handler handler
         * @return Product
         */
        public Product executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<Product>(){}.getType();
            return execute(handler).as(type);
        }

         /**
         * @param product (Product) Product attributes to update (required)
         * @return operation
         */
        public UpdateProductByIdOper body(Product product) {
            reqSpec.setBody(product);
            return this;
        }

        public static final String ID_PATH = "id";

        /**
         * @param id (Long) ID of product to fetch (required)
         * @return operation
         */
        public UpdateProductByIdOper idPath(Object id) {
            reqSpec.addPathParam(ID_PATH, id);
            return this;
        }

        /**
         * Customise request specification
         * @param consumer consumer
         * @return operation
         */
        public UpdateProductByIdOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         * @param consumer consumer
         * @return operation
         */
        public UpdateProductByIdOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
}
